import time
import pandas as pd
from pathlib import Path
from prefect import flow, task
from prefect.logging import get_run_logger
from typing import Dict, Any

# Model imports
from src.models.gmm_model import GMMWrapper
# from src.models.base import SyntheticModel


@task
def generate_data_task(model_path: str, model_name: str, config: Dict[str, Any], n_samples: int):
    """
    Task to generate synthetic data using a trained model.
    """
    logger = get_run_logger()
    logger.info(f"üß† Loading model '{model_name}' from '{model_path}' to generate {n_samples} samples")
    
    model_instance: Any = None
    output_filename = f"synthetic_output_{model_name}.csv" # Dynamic output filename
    output_path = Path("./data") / output_filename
    output_path.parent.mkdir(parents=True, exist_ok=True)

    logger.debug(f"Output will be saved to: {output_path}")
    logger.debug(f"Model configuration: {config}")

    try:
        if config["model_type"] == "gmm":
            # For GMM, config isn't strictly needed for loading/sampling if all info is in the .pkl
            # but good to have for consistency and if some sampling params come from config
            logger.debug("Initializing GMM model wrapper")
            model_instance = GMMWrapper(
                model_name=model_name, 
                model_path=model_path, 
                config=config # Pass config, might be used for sampling parameters in future
            )
            model_instance.load_model()
            df_synthetic = model_instance.sample(n_samples)
        elif config["model_type"] == "dummy_time_series_model":
            logger.info(f"Simulating data generation for dummy model '{model_name}'")
            logger.debug("Creating dummy time series data")
            time.sleep(2) # Reduced sleep time
            data = {
                'timestamp': pd.to_datetime(pd.date_range(start='2024-01-01', periods=n_samples, freq='h')),
                'value': pd.Series(range(n_samples)) + pd.Series(range(n_samples)).apply(lambda x: x * 0.1),
                'model_name': model_name
            }
            df_synthetic = pd.DataFrame(data)
            logger.debug(f"Created dummy data with shape: {df_synthetic.shape}")
        else:
            error_msg = f"Unknown model type: {config['model_type']}"
            logger.error(f"‚ùå {error_msg}")
            raise ValueError(error_msg)

        # Save generated data
        logger.debug(f"Saving synthetic data to {output_path}")
        df_synthetic.to_csv(output_path, index=False)
        logger.info(f"‚úÖ Synthetic data ({n_samples} samples) generated by '{model_name}' and saved to '{output_path}'")
        return str(output_path)
        
    except Exception as e:
        logger.error(f"‚ùå Failed to generate data with model '{model_name}': {str(e)}")
        raise


@flow(log_prints=True)
def generation_flow(model_path: str, model_name: str, config: Dict[str, Any], n_samples: int):
    """
    Flow to generate synthetic data using a specific model.
    """
    logger = get_run_logger()
    logger.info(f"üöÄ Starting generation flow with '{model_name}' (type: {config['model_type']}) for {n_samples} samples")
    logger.debug(f"Model path: {model_path}")
    
    try:
        output_path = generate_data_task(model_path, model_name, config, n_samples)
        logger.info(f"‚úÖ Generation flow completed successfully. Data saved to '{output_path}'")
        return output_path
    except Exception as e:
        logger.error(f"‚ùå Generation flow failed: {str(e)}")
        raise
