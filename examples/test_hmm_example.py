"""
Script de ejemplo para probar el modelo HMM con datos sint√©ticos.

Este script:
1. Genera datos de ejemplo simulando un sistema con estados ocultos
2. Entrena un modelo HMM
3. Genera datos sint√©ticos
4. Predice estados ocultos
"""

import pandas as pd
import numpy as np
from pathlib import Path
import sys

# Agregar el directorio ra√≠z al path para importar m√≥dulos
sys.path.append(str(Path(__file__).parent.parent))

from src.flows.training import training_flow
from src.models.hmm_model import HMMWrapper

def generate_sample_data(n_samples=500, save_path="data/sample_hmm_data.csv"):
    """
    Genera datos de ejemplo que simulan un sistema con 3 estados ocultos.
    
    Ejemplo: datos de un sensor con 3 reg√≠menes de operaci√≥n:
    - Estado 0: Normal (baja temperatura, baja vibraci√≥n)
    - Estado 1: Carga media (temperatura media, vibraci√≥n media)  
    - Estado 2: Sobrecarga (alta temperatura, alta vibraci√≥n)
    """
    np.random.seed(42)
    
    # Definir los par√°metros de cada estado
    states_params = {
        0: {"temp_mean": 25, "temp_std": 2, "vibr_mean": 10, "vibr_std": 1},  # Normal
        1: {"temp_mean": 45, "temp_std": 3, "vibr_mean": 25, "vibr_std": 2},  # Media carga
        2: {"temp_mean": 70, "temp_std": 4, "vibr_mean": 45, "vibr_std": 3},  # Sobrecarga
    }
    
    # Matriz de transici√≥n (probabilidades de cambio entre estados)
    transition_matrix = np.array([
        [0.7, 0.25, 0.05],  # Desde estado 0
        [0.3, 0.6, 0.1],    # Desde estado 1  
        [0.1, 0.4, 0.5]     # Desde estado 2
    ])
    
    # Generar secuencia de estados ocultos
    states = [0]  # Comenzar en estado normal
    for _ in range(n_samples - 1):
        current_state = states[-1]
        next_state = np.random.choice(3, p=transition_matrix[current_state])
        states.append(next_state)
    
    # Generar observaciones basadas en los estados
    temperatures = []
    vibrations = []
    
    for state in states:
        params = states_params[state]
        
        temp = np.random.normal(params["temp_mean"], params["temp_std"])
        vibr = np.random.normal(params["vibr_mean"], params["vibr_std"])
        
        temperatures.append(temp)
        vibrations.append(vibr)
    
    # Crear DataFrame
    df = pd.DataFrame({
        'timestamp': pd.date_range('2024-01-01', periods=n_samples, freq='H'),
        'temperature': temperatures,
        'vibration': vibrations,
        'true_state': states  # Estados reales (en la pr√°ctica no los conocemos)
    })
    
    # Guardar datos
    Path(save_path).parent.mkdir(parents=True, exist_ok=True)
    df.to_csv(save_path, index=False)
    
    print(f"‚úÖ Datos de ejemplo generados: {save_path}")
    print(f"üìä Forma de los datos: {df.shape}")
    print(f"üéØ Estados √∫nicos: {sorted(df['true_state'].unique())}")
    print(f"üìà Estad√≠sticas por estado:")
    print(df.groupby('true_state')[['temperature', 'vibration']].mean().round(2))
    
    return df

def test_hmm_training():
    """
    Prueba el entrenamiento del modelo HMM.
    """
    print("\n" + "="*50)
    print("üèãÔ∏è PROBANDO ENTRENAMIENTO DE MODELO HMM")
    print("="*50)
    
    # Configuraci√≥n del modelo HMM
    hmm_config = {
        "model_type": "hmm",
        "hmm_columns_to_use": ["temperature", "vibration"],
        "hmm_sequence_column": "timestamp",  # Para ordenar temporalmente
        "hmm_n_states": 3,
        "hmm_covariance_type": "diag",
        "hmm_n_iter": 100,
        "hmm_random_state": 42,
    }
    
    try:
        # Entrenar modelo
        model_path = training_flow(
            data_path="data/sample_hmm_data.csv",
            model_name="sensor_hmm_test",
            config=hmm_config
        )
        
        print(f"‚úÖ Modelo entrenado exitosamente")
        print(f"üì¶ Guardado en: {model_path}")
        return model_path
        
    except Exception as e:
        print(f"‚ùå Error en entrenamiento: {e}")
        return None

def test_hmm_training_auto():
    """
    Prueba el entrenamiento del modelo HMM con auto-selecci√≥n de columnas.
    """
    print("\n" + "="*50)
    print("üèãÔ∏è PROBANDO ENTRENAMIENTO CON AUTO-SELECCI√ìN DE COLUMNAS")
    print("="*50)
    
    # Configuraci√≥n del modelo HMM sin especificar columnas
    hmm_config_auto = {
        "model_type": "hmm",
        # hmm_columns_to_use no especificado = auto-selecci√≥n
        "hmm_sequence_column": "timestamp",  # Se excluir√° autom√°ticamente
        "hmm_n_states": 3,
        "hmm_covariance_type": "diag", 
        "hmm_n_iter": 100,
        "hmm_random_state": 42,
    }
    
    try:
        # Entrenar modelo con auto-selecci√≥n
        model_path = training_flow(
            data_path="data/sample_hmm_data.csv",
            model_name="sensor_hmm_auto_test",
            config=hmm_config_auto
        )
        
        print(f"‚úÖ Modelo con auto-selecci√≥n entrenado exitosamente")
        print(f"üì¶ Guardado en: {model_path}")
        return model_path
        
    except Exception as e:
        print(f"‚ùå Error en entrenamiento con auto-selecci√≥n: {e}")
        return None

def test_hmm_sampling(model_path):
    """
    Prueba la generaci√≥n de datos sint√©ticos.
    """
    print("\n" + "="*50)
    print("üß† PROBANDO GENERACI√ìN DE DATOS SINT√âTICOS")
    print("="*50)
    
    try:
        # Cargar modelo
        hmm_model = HMMWrapper(
            model_name="sensor_hmm_test",
            model_path=model_path,
            config={}
        )
        hmm_model.load_model()
        
        # Generar datos sint√©ticos
        n_synthetic = 100
        synthetic_data = hmm_model.sample(n_samples=n_synthetic)
        
        print(f"‚úÖ Generados {n_synthetic} puntos sint√©ticos")
        print(f"üìä Columnas: {list(synthetic_data.columns)}")
        print(f"üéØ Estados √∫nicos generados: {sorted(synthetic_data['hidden_state'].unique())}")
        
        print("\nüìà Primeras 10 muestras:")
        print(synthetic_data.head(10)[['temperature', 'vibration', 'hidden_state']].round(2))
        
        print("\nüìä Estad√≠sticas por estado generado:")
        stats = synthetic_data.groupby('hidden_state')[['temperature', 'vibration']].agg(['mean', 'std']).round(2)
        print(stats)
        
        return synthetic_data
        
    except Exception as e:
        print(f"‚ùå Error en generaci√≥n: {e}")
        return None

def test_hmm_prediction(model_path):
    """
    Prueba la predicci√≥n de estados ocultos.
    """
    print("\n" + "="*50)
    print("üîÆ PROBANDO PREDICCI√ìN DE ESTADOS OCULTOS")
    print("="*50)
    
    try:
        # Cargar modelo
        hmm_model = HMMWrapper(
            model_name="sensor_hmm_test",
            model_path=model_path,
            config={}
        )
        hmm_model.load_model()
        
        # Crear datos de prueba representativos de cada estado
        test_data = pd.DataFrame({
            'temperature': [25, 45, 70, 30, 50],  # Diferentes reg√≠menes
            'vibration': [10, 25, 45, 12, 30]
        })
        
        # Predecir estados
        predicted_states = hmm_model.predict_hidden_states(test_data)
        
        print("‚úÖ Predicci√≥n completada")
        print("\nüìä Datos de entrada vs Estados predichos:")
        
        test_with_predictions = test_data.copy()
        test_with_predictions['predicted_state'] = predicted_states
        print(test_with_predictions)
        
        # Interpretaci√≥n esperada (aproximada)
        print("\nüí° Interpretaci√≥n esperada:")
        print("Estado 0: Normal (temp ~25, vibr ~10)")
        print("Estado 1: Media carga (temp ~45, vibr ~25)")  
        print("Estado 2: Sobrecarga (temp ~70, vibr ~45)")
        
        return predicted_states
        
    except Exception as e:
        print(f"‚ùå Error en predicci√≥n: {e}")
        return None

def main():
    """
    Funci√≥n principal que ejecuta todas las pruebas.
    """
    print("üöÄ INICIANDO PRUEBAS DEL MODELO HMM")
    print("="*50)
    
    # 1. Generar datos de ejemplo
    print("1Ô∏è‚É£ Generando datos de ejemplo...")
    sample_data = generate_sample_data()
    
    if sample_data is not None:
        # 2. Entrenar modelo
        print("\n2Ô∏è‚É£ Entrenando modelo HMM...")
        model_path = test_hmm_training()
        
        # 2b. Entrenar modelo con auto-selecci√≥n
        print("\n2Ô∏è‚É£b Entrenando modelo HMM con auto-selecci√≥n...")
        model_path_auto = test_hmm_training_auto()
        
        if model_path:
            # 3. Generar datos sint√©ticos
            print("\n3Ô∏è‚É£ Generando datos sint√©ticos...")
            synthetic_data = test_hmm_sampling(model_path)
            
            # 4. Predecir estados
            print("\n4Ô∏è‚É£ Prediciendo estados ocultos...")
            predictions = test_hmm_prediction(model_path)
            
            if all([synthetic_data is not None, predictions is not None]):
                print("\n" + "="*50)
                print("üéâ ¬°TODAS LAS PRUEBAS COMPLETADAS EXITOSAMENTE!")
                print("="*50)
                print("\nüìã Resumen:")
                print(f"- Datos originales: {len(sample_data)} puntos")
                if synthetic_data is not None:
                    print(f"- Datos sint√©ticos: {len(synthetic_data)} puntos")
                if predictions is not None:
                    print(f"- Predicciones: {len(predictions)} estados")
                print(f"- Modelo manual guardado en: {model_path}")
                if model_path_auto:
                    print(f"- Modelo auto-selecci√≥n guardado en: {model_path_auto}")
            else:
                print("\n‚ö†Ô∏è Algunas pruebas fallaron. Revisa los logs arriba.")
        else:
            print("\n‚ùå No se pudo completar el entrenamiento.")
    else:
        print("\n‚ùå No se pudieron generar los datos de ejemplo.")

if __name__ == "__main__":
    main() 